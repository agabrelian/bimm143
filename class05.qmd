---
title: "Class 05: Data Visualization"
author: "Ani (A16647613)"
format: pdf
editor: visual
---

# Graphic Systems in R

There are many graphics in R for making plots and figures

We have already played a little with **"base R"** graphics and the `plot()` function.

Today we will start learning about a popular graphics package called `ggplot2()`.\

This is an add on package- ie. we need to install it. I installed it (like I install any package) with the `install.packages()` function.

```{r}
plot(cars)
```

Before I can use the functions from a package I have to load the package from my "library". We use the `library(ggplot2)` command to load it up.

```{r}
library(ggplot2)
ggplot(cars)
```

Every ggplot is made up of at least 3 things: - data (the numbers etc. that will go into your plot) - aes (how the columns of data map to the plot aesthetics) - geoms (how the plot actually looks, points, bars, lines, etc.)

```{r}
ggplot(cars) + 
aes(x=speed, y=dist) + 
geom_point()
```

For simple plots, ggplot is more verbose - it takes more code than base R plot.

Add some more layers to our ggplot:

```{r}
ggplot(cars) + aes(x=speed, y=dist) + 
geom_point() + 
geom_smooth(method="lm") + 
labs(title="Stopping distance of old cars", 
subtitle="A silly example plot") + theme_bw()
```

# Section 6

Now, looking into dataset "genes":

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

Table of column titled "State" to determine how many up-regulated genes there are:

```{r}
table(genes$State)
```

Total genes up-regulated in dataset

```{r}
round( table(genes$State)/nrow(genes) * 100, 2)
```

Plot of Genes in terms of Condition1 and Condition2

```{r}
ggplot(genes) + aes(x=Condition1, y=Condition2) + geom_point()
```

Plot of Genes in terms of Condition1 and Condition2 (Enhanced based on the conditions of the State Column)

```{r}
ggplot(genes) + 
aes(x=Condition1, y=Condition2, col=State) + 
geom_point() + 
scale_color_manual(values= c("green", "purple", "red"))
```

Now time to add the proper title:

```{r}
ggplot(genes) + 
aes(x=Condition1, y=Condition2, col=State) + 
geom_point() + 
scale_color_manual(values= c("green", "purple", "red")) + 
labs(title="Gene Expression Changes Upon Drug Treatment")
```

# Section 7

```{r}
url <-"https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)
head(gapminder)
```

Now, we are going to consider the dataset values specifically from 2007, after downloading the "dplyr" binary package.

```{r}
library(dplyr)
gapminder_2007 <- gapminder %>% filter(year==2007)
```

The first ggplot of gapminder_2007 in terms of the gdpPercap and Life Expectancy

```{r}
ggplot(gapminder_2007)+aes(gdpPercap, y=lifeExp) + geom_point()
```

It will be easier to see the points more clearly with transparency, as added to the following sequence by including `alpha=0.4` to `geom_point()`.

```{r}
 ggplot(gapminder_2007)+aes(gdpPercap, y=lifeExp) + 
geom_point(alpha=0.4)
```

We are going to separate each point on the plot by size in the parameters of `population` and color in the parameters of `continent`.

```{r}
ggplot(gapminder_2007) + 
aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
geom_point(alpha=0.4)
```

Points based on numeric variable population `pop`:

```{r}
ggplot(gapminder_2007) + 
aes(x= gdpPercap, y= lifeExp, color=pop) + 
geom_point(alpha=0.8)
```

To adjust point size based on size = `pop` of each country and the rest of the adjustments:

```{r}
ggplot(gapminder_2007) + 
aes(x= gdpPercap, y= lifeExp, size=pop) + 
geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
geom_point(aes(x = gdpPercap, y = lifeExp, size = pop), 
alpha=0.5) + scale_size_area(max_size = 10)
```

Now, to create a plot for the dataset values for the year 1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + 
aes(x = gdpPercap, y = lifeExp, color=continent, size=pop) + 
geom_point(alpha=0.7) + 
scale_size_area(max_size = 10)
```
Comparing the gdpPercap and lifeExp of populations in the continents in 1957 versys 2007:

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
geom_point(aes(x= gdpPercap, y= lifeExp,
color=continent, size=pop,),alpha=0.7) + 
scale_size_area(max_size=10) + facet_wrap(~year)
```

